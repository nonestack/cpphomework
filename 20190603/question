1. C++11为什么要引入右值引用？
	在类进行复制控制时，大多数情况下都会进行拷贝操作，
	如果可以对这些临时对象进行移动，可以省略拷贝时所花的时间和空间


3. std::move的作用是什么？
	std::move告诉编译器，这个左值我们希望可以让它像一个右值操作

4. 智能指针的实现原理是什么？
	智能指针通过模板类来实现，通过类的生命周期的结束来调用
	该类的析构函数，以此达到自动释放指针的目的

5. C++提供了哪几种智能指针，其各自的特点是什么？
	c++提供了
		auto_ptr		c++11之前使用，可以完成智能指针的基本操作
						可以进行拷贝，会调用多次析构函数，
						可能会造成内存的多次释放，已在c++17中被移除

		unique_ptr		可以实现智能指针的操作，但不可以对齐进行复制

		shared_ptr		可以进行复制，其类中管理着一个引用计数器，当
						引用计数为0时，对指针进行释放

		weak_ptr		为了配合shared_ptr指针使用，避免shared_ptr指针中出现
						循环嵌套导致的内存泄漏
					
